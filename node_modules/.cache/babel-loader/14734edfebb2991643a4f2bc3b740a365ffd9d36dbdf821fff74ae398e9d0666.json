{"ast":null,"code":"var _jsxFileName = \"/home/wango/codechallenge2/src/BotCollection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BotCollection = () => {\n  _s();\n  const [robots, setRobots] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3000/bots').then(response => response.json()).then(data => setRobots(data)).catch(err => console.log(err));\n  }, []);\n  console.log('Robots in state:', robots);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your Robots\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), robots.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading robots...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: robots.map(robot => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Name:\", robot.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Health:\", robot.health]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Damage:\", robot.damage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Armor:\", robot.armor]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 15\n        }, this)]\n      }, robot.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_s(BotCollection, \"3S4TYWHJTS5Wkf8KrOuaroOdCBs=\");\n_c = BotCollection;\nexport default BotCollection;\nvar _c;\n$RefreshReg$(_c, \"BotCollection\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","BotCollection","_s","robots","setRobots","fetch","then","response","json","data","catch","err","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","robot","name","health","damage","armor","id","_c","$RefreshReg$"],"sources":["/home/wango/codechallenge2/src/BotCollection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst BotCollection = () => {\n  const [robots, setRobots] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:3000/bots')\n      .then((response) => response.json())\n      .then(data=> setRobots(data))\n      .catch(err => console.log(err))\n},[]);\n\n  console.log('Robots in state:', robots);\n\n  return (\n    <div>\n      <h1>Your Robots</h1>\n      {robots.length === 0 ? (\n        <p>Loading robots...</p>\n      ) : (\n        <ul>\n          {robots.map((robot) => (\n            <li key={robot.id}>\n              <h3>Name:{robot.name}</h3>\n              <p>Health:{robot.health}</p>\n              <p>Damage:{robot.damage}</p>\n              <p>Armor:{robot.armor}</p>\n              <p>Level</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default BotCollection;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACdO,KAAK,CAAC,4BAA4B,CAAC,CAChCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAACG,IAAI,IAAGL,SAAS,CAACK,IAAI,CAAC,CAAC,CAC5BC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;EACrC,CAAC,EAAC,EAAE,CAAC;EAEHC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEV,MAAM,CAAC;EAEvC,oBACEH,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnBf,MAAM,CAACgB,MAAM,KAAK,CAAC,gBAClBnB,OAAA;MAAAc,QAAA,EAAG;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAExBlB,OAAA;MAAAc,QAAA,EACGX,MAAM,CAACiB,GAAG,CAAEC,KAAK,iBAChBrB,OAAA;QAAAc,QAAA,gBACEd,OAAA;UAAAc,QAAA,GAAI,OAAK,EAACO,KAAK,CAACC,IAAI;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC1BlB,OAAA;UAAAc,QAAA,GAAG,SAAO,EAACO,KAAK,CAACE,MAAM;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5BlB,OAAA;UAAAc,QAAA,GAAG,SAAO,EAACO,KAAK,CAACG,MAAM;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5BlB,OAAA;UAAAc,QAAA,GAAG,QAAM,EAACO,KAAK,CAACI,KAAK;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1BlB,OAAA;UAAAc,QAAA,EAAG;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA,GALLG,KAAK,CAACK,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMb,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChB,EAAA,CAhCID,aAAa;AAAA0B,EAAA,GAAb1B,aAAa;AAkCnB,eAAeA,aAAa;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}